from dotenv import load_dotenv
import os
import telebot
from telebot import types
import requests
import json
import time
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log",
    encoding="utf-8"
)
logger = logging.getLogger(__name__)

load_dotenv()

AMOCRM_DOMAIN = os.getenv('AMOCRM_DOMAIN')
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://ya.ru')

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def load_tokens():
    try:
        with open('tokens.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return None

def save_tokens(tokens):
    with open('tokens.json', 'w') as file:
        json.dump(tokens, file)

def refresh_tokens():
    tokens = load_tokens()
    if not tokens:
        raise Exception("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    url = f'https://{AMOCRM_DOMAIN}/oauth2/access_token'
    data = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'refresh_token',
        'refresh_token': tokens['refresh_token'],
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, data=data)
    if response.status_code == 200:
        new_tokens = response.json()
        new_tokens['expires_in'] = time.time() + new_tokens['expires_in']
        save_tokens(new_tokens)
        logger.info("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return new_tokens
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {response.status_code}, {response.text}")
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.")

def get_access_token():
    tokens = load_tokens()
    if not tokens:
        raise Exception("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    if time.time() >= tokens['expires_in']:
        logger.info("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        tokens = refresh_tokens()

    return tokens['access_token']

def add_lead_to_amo_crm(name, phone, age, username):
    access_token = get_access_token()

    url = f'https://{AMOCRM_DOMAIN}/api/v4/leads'
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    data = [
        {
            "name": f"–õ–∏–¥ –æ—Ç {name}",
            "custom_fields_values": [
                {
                    "field_id": 931725,
                    "values": [{"value": phone}]
                },
                {
                    "field_id": 931775,
                    "values": [{"value": age}]
                },
                {
                    "field_id": 932703,
                    "values": [{"value": username}]
                }
            ]
        }
    ]
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data))
        response.raise_for_status()
        logger.info(f"–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –ª–∏–¥–∞: {response.json()['_embedded']['leads'][0]['id']}")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def main(message):
    file_id = 'AgACAgIAAxkDAAMiZ7hmP7jMxCSWyPuPNUru_PXsmWkAAtHrMRtJ8cBJFJx_lD_HfxABAAMCAAN5AAM2BA'
    bot.send_photo(message.chat.id, file_id)

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('5-8 –ª–µ—Ç', callback_data='5-8')
    btn2 = types.InlineKeyboardButton('9-11 –ª–µ—Ç', callback_data='9-11')
    btn3 = types.InlineKeyboardButton('12-14 –ª–µ—Ç', callback_data='12-14')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)

    response = (
        "<b>–í –ö–∞–∑–∞–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–æ–π–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–µ–π 5-14 –ª–µ—Ç!</b>\n\n"
        "–í–∞—à —Ä–µ–±–µ–Ω–æ–∫:\n\n"
        "‚≠êÔ∏è –ü–æ—Å—Ç—É—á–∏—Ç –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö, —Å—ã–≥—Ä–∞–µ—Ç –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏\n\n"
        "‚≠êÔ∏è –ü–æ–ø—Ä–æ–±—É–µ—Ç —Å–µ–±—è –≤ –≤–æ–∫–∞–ª–µ, —Å–ø–æ–µ—Ç –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –æ–ø—ã—Ç–Ω–æ–≥–æ –ø–µ–¥–∞–≥–æ–≥–∞\n\n"
        "‚úÖ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤–∞–∂–µ–Ω. –î–ª—è –¥–µ—Ç–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞ 5-14 –ª–µ—Ç\n\n"
        "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äì 1,5 —á–∞—Å–∞. –ù–∏—á–µ–≥–æ –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –Ω–µ –Ω—É–∂–Ω–æ\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ üëá"
    )
    bot.send_message(message.chat.id, response, parse_mode='html', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: True)
def handle_age(call):
    age = call.data
    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {age}")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(btn_phone)

    bot.send_message(
        call.message.chat.id,
        "–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥üòä\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ü§ó",
        reply_markup=markup
    )

    bot.register_next_step_handler(call.message, get_phone, age)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def get_phone(message, age):
    phone_number = message.contact.phone_number

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    if username:
        username = f"@{username}"
    else:
        username = "–ù–µ —É–∫–∞–∑–∞–Ω"

    markup = types.ReplyKeyboardRemove(selective=False)

    if add_lead_to_amo_crm(message.from_user.first_name, phone_number, age, username):
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ!\n\n"
            "–°–∫–æ—Ä–æ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞!\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –≤ Telegram, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: https://t.me/neshkolakidskzn",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=markup
        )

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()